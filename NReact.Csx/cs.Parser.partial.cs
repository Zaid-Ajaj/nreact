using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;

namespace NReact.Csx
{
  public class ParserError
  {
    public int Line, Column, Code;
    public string Message;
  }

  public partial class Parser
  {
    public StringBuilder _sb = new StringBuilder();
    int _start = 0;
    bool _active = true;
    string _source;

    public string Result { get; private set; }

    public Parser(string text)
      : this(new Scanner(text))
    {
      _source = text;

      _sb.AppendLine("//------------------------------------------------------------------------------");
      _sb.AppendLine("// <auto-generated>");
      _sb.AppendLine("//     This code was generated by NReact Csx Transpiler.");
      _sb.AppendLine("//");
      _sb.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
      _sb.AppendLine("//     the code is regenerated.");
      _sb.AppendLine("// </auto-generated>");
      _sb.AppendLine("//------------------------------------------------------------------------------");
      _sb.AppendLine();
    }

    public Action<ParserError> OnError;

    partial void OnSyntaxError(int line, int col, int n)
    {
      var e = OnError;
      if (e != null) e(new ParserError { Line = line, Column = col, Code = n, Message = Errors.GetErrorText(n) });
    }

    partial void OnSemanticError(int line, int col, string msg)
    {
      var e = OnError;
      if (e != null) e(new ParserError { Line = line, Column = col, Message = msg });
    }

    Stack<CaptureInfo> _sbStack = new Stack<CaptureInfo>();

    class CaptureInfo
    {
      public StringBuilder Builder;
      public int Begin;
      public Mode Mode;
    }

    enum Mode { CSharp, Csx }

    Mode _mode = Mode.CSharp;

    void BeginCapture(Mode mode)
    {
      if (mode == Mode.Csx)
        Flush();

      var initial = _sbStack.Count == 0;

      _sbStack.Push(new CaptureInfo { Builder = _sb, Begin = _captureBegin, Mode = _mode });
      _sb = new StringBuilder();
      
      if (!initial)
        _captureBegin = la.pos;

      _mode = mode;
    }
    int _captureBegin;

    string EndCapture()
    {
      var oldMode = _mode;
      Flush();
      var oldBegin = _captureBegin;

      var result = _sb.ToString();
      var pop = _sbStack.Pop();
      _sb = pop.Builder;
      _mode = pop.Mode;

      if (oldMode == _mode)
        _captureBegin = pop.Begin;

      return result;
    }

    void Flush()
    {
      var newBegin = la.pos;
      var captureLength = newBegin - _captureBegin;
      if (captureLength > 0)
        _sb.Append(_source.Substring(_captureBegin, captureLength));

      _captureBegin = newBegin;
    }

    void Out(PElement element, int indent)
    {
      Flush();

      element.Consolidate(null);
      element.Write(_sb, new string(' ', indent), true);
    }

    class PNode
    {
      public string Name;
      public string Ns;
      public virtual void WriteAsAttr(StringBuilder sb) { }
      public virtual void Write(StringBuilder sb, string indent, bool dontIndent = false) { }
      public virtual void Consolidate(PElement parent) { }
      public virtual bool HasChildren { get { return false; } }
    }

    class PElement : PNode
    {
      public List<PNode> Attributes = new List<PNode>();
      public List<PNode> Children = new List<PNode>();
      public override bool HasChildren { get { return Children.Count > 0; } }

      public override void Write(StringBuilder sb, string indent, bool dontIndent = false)
      {
        if (!dontIndent)
          sb.Append(indent);

        sb.AppendFormat("New(typeof({0}), ", Name);

        if (Attributes.Count == 0)
          sb.Append("null");
        else
        {
          sb.Append("new { ");
          for (int i = 0, c = Attributes.Count; i < c; i++)
          {
            if (i != 0)
              sb.Append(", ");

            Attributes[i].WriteAsAttr(sb);
          }
          sb.Append(" }");
        }

        if (Children.Count > 0)
        {
          indent += "  ";
          if (Children.Count == 1 && !Children[0].HasChildren)
          {
            sb.Append(", ");
            Children[0].Write(sb, indent, true);
          }
          else
            foreach (var i in Children)
            {
              sb.AppendLine(",");
              i.Write(sb, indent);
            }

        }
        sb.Append(")");
      }

      public override void Consolidate(PElement parent)
      {
        for (var i = 0; i < Attributes.Count; i++)
        {
          var c = Attributes[i];
          c.Consolidate(this);
          if (c.Name == null) continue;

          c.Name = c.Name.Replace('.', '_');
        }

        for (var i = 0; i < Children.Count; i++)
        {
          var c = Children[i];
          c.Consolidate(this);
          if (c.Name == null) continue;

          if (c.Name.StartsWith(Name + ".") && c.Ns == Ns)
          {
            c.Name = c.Name.Substring(Name.Length + 1);
            Attributes.Add(c);
            Children[i] = null;
            continue;
          }

          c.Name = c.Name.Replace('.', '_');
        }

        Children.RemoveAll(i => i == null);
      }

      public override void WriteAsAttr(StringBuilder sb)
      {
        if (Name != null)
        {
          sb.Append(Name);
          sb.Append(" = ");
          if (Children.Count == 1)
            Children[0].Write(sb, null, true);
          else
          {
            sb.Append("new[] { ");
            for (int i = 0, c = Children.Count; i < c; i++)
            {
              if (i != 0)
                sb.Append(", ");

              Children[i].Write(sb, null, true);
            }
            sb.Append(" }");
          }
        }
      }
    }

    class PVerbose : PNode
    {
      public string Value;

      public override void Write(StringBuilder sb, string indent, bool dontIndent)
      {
        if (!dontIndent)
          sb.Append(indent);

        WriteAsAttr(sb);
      }

      public override void WriteAsAttr(StringBuilder sb)
      {
        if (Name != null)
        {
          sb.Append(Name);
          sb.Append(" = ");
        }
        sb.Append(Value);
      }
    }
  }
}
