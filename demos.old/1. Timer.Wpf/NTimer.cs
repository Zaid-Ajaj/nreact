using System;
using System.Threading;

#if NETFX_CORE
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
#else
using System.Windows;
using System.Windows.Controls;
#endif

namespace NReact.Demos
{
  public partial class NTimer : NClass
  {
    #region must be autogenerated

    public static class Properties
    {
      public readonly static NProperty Start = new NProperty(nameof(Start));
      public readonly static NProperty Now = new NProperty(nameof(Now));
    }

    /* In CSX should look like this:

      protected DateTime Start { get; set; }
      protected DateTime Now { get; set; }

    */
    protected DateTime Start { get { return GetState(Properties.Start, default(DateTime)); } set { SetState(Properties.Start, value); } }
    protected DateTime Now { get { return GetState(Properties.Now, default(DateTime)); } set { SetState(Properties.Now, value); } }

    /* In CSX should look like this:

    protected override NElement Render() 
    {   
      return <TextBlock 
                Text={(Now - Start).ToString("s'.'f")} 
                HorizontalAlignment="Center" 
                VerticalAlignment="Center" 
                FontSize="24.5"/>;
    }

     */

    public override NElement Render()
    {
      return
        new NXaml<TextBlock>().
              Text((Now - Start).ToString("s'.'f")).
              HorizontalAlignment(HorizontalAlignment.Center).
              VerticalAlignment(VerticalAlignment.Center).
              FontSize(24.5);
    }

    #endregion

    Timer _timer;

    protected override void Loaded()
    {
      _timer = new Timer(UpdateTime, null, 0, 100);
    }

    protected override void Unloaded()
    {
      _timer.Dispose();
    }

    protected override void InitState()
    {
      Start = DateTime.Now;
      Now = DateTime.Now;
    }

    void UpdateTime(object state)
    {
      Now = DateTime.Now;
    }
  }
}